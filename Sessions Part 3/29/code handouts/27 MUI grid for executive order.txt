import { useState } from "react";
import { DataGrid, GridColDef, GridActionsCellItem } from '@mui/x-data-grid';
import SaveIcon from '@mui/icons-material/Save';
import DeleteIcon from '@mui/icons-material/Delete';
import { IPresident, IExecutiveOrder } from "./DataInterfaces";
import { blankExecutiveOrder, deleteExecutiveOrder, postExecutiveOrder } from "./DataUtil";

interface Props {
    president: IPresident;
    onChanged: (value: IExecutiveOrder, fordelete: boolean) => void;
}

export function ExecutiveOrderGrid({ president, onChanged }: Props) {
    const [errormsg, setErrormsg] = useState("");

    const [rowData, setRowData] = useState<IExecutiveOrder[]>(
        president?.executiveOrderList || [],
    );

    const columns: GridColDef[] = [
        { field: "orderNumber", headerName: "Order Number", width: 150, editable: true },
        { field: "pageNum", headerName: "Page Number", width: 150, editable: true },
        { field: "yearIssued", headerName: "Year Issued", width: 150, editable: true },
        { field: "orderName", headerName: "Order Name", width: 200, editable: true },
        {
            field: "actions",
            headerName: "Actions",
            type: 'actions',
            width: 150,
            getActions: (params) => [
                <GridActionsCellItem
                    icon={<SaveIcon />}
                    label="Save"
                    onClick={() => handleSave(params.row)}
                />,
                <GridActionsCellItem
                    icon={<DeleteIcon />}
                    label="Delete"
                    onClick={() => handleDelete(params.row)}
                />
            ],
        },
    ];

    const handleSave = async (row: IExecutiveOrder) => {
        try {
            setErrormsg("");
            //this code handles new records and updates, for new records the primary key before post is a negative number
            const recordid = row.executiveOrderId;
            //if new record then after post updatedOrder has the new primary key
            const updatedOrder = await postExecutiveOrder(row);
            if (updatedOrder.errorMessage) {
                throw new Error(updatedOrder.errorMessage);
            }

            const updatedData = rowData.map(order =>
                //match on recordid because if new record then rowData still has the negative primary key
                order.executiveOrderId === recordid ? updatedOrder : order
            );
            setRowData(updatedData);
            onChanged(updatedOrder, false);
        } catch (error: any) {
            setErrormsg(error.message);
        }
    };


    const handleDelete = async (row: IExecutiveOrder) => {
        try {
            setErrormsg("");
            const r = await deleteExecutiveOrder(row);
            if ((r as any).errorMessage) {
                throw new Error((r as any).errorMessage);
            }
            const updatedData = rowData.filter(order => order.executiveOrderId !== row.executiveOrderId);
            setRowData(updatedData);
            onChanged(row, true);
        } catch (error: any) {
            setErrormsg(error.message);
        }
    };

    const processRowUpdate = (updatedrow: IExecutiveOrder) => {
        const updatedRows = rowData.map(row =>
            row.executiveOrderId === updatedrow.executiveOrderId ? updatedrow : row
        );
        setRowData(updatedRows);
        return updatedrow;
    };

    const handleAddNew = () => {
        const nextId = -(rowData.length + 1);
        const newOrder = {
            ...blankExecutiveOrder,
            executiveOrderId: nextId, // Use a negative number as a temporary ID
            presidentId: president.presidentId,
        };
        setRowData([...rowData, newOrder]);
    };

    return (
        <div style={{ height: '100%', width: '100%' }}>
            <h2>{errormsg}</h2>
            <button
                className="btn btn-primary"
                onClick={handleAddNew}
            >
                Add New
            </button>
            <DataGrid
                rows={rowData}
                columns={columns}
                processRowUpdate={processRowUpdate}
                getRowId={(row) => row.executiveOrderId}
            />
        </div>
    );
}
