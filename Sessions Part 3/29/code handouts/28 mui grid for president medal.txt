import { useState, useEffect } from "react";
import { DataGrid, GridColDef, GridActionsCellItem } from '@mui/x-data-grid';
import SaveIcon from '@mui/icons-material/Save';
import DeleteIcon from '@mui/icons-material/Delete';
import { IMedal, IPresident, IPresidentMedal } from "./DataInterfaces";
import { fetchMedals, postPresidentMedal, deletePresidentMedal, blankPresidentMedal } from "./DataUtil";

interface Props {
    president: IPresident;
    onChanged: (value: IPresidentMedal, fordelete: boolean) => void;
}

export default function PresidentMedalGrid({ president, onChanged }: Props) {

    const [errormsg, setErrormsg] = useState("");
    const [rowData, setRowData] = useState<IPresidentMedal[]>(president?.presidentMedalList || []);
    const [medals, setMedals] = useState<IMedal[]>([]);
    
    useEffect(() => {
        const fetchData = async () => {
            const data = await fetchMedals();
            setMedals(data);
        };
        fetchData();
    }, []);

    const columns: GridColDef[] = [
        {
            field: "medalId",
            headerName: "Medal Name",
            width: 200,
            editable: true,
            type: "singleSelect",
            valueOptions: medals.map(medal => ({
                value: medal.medalId,
                label: medal.medalName,
            })),
        },
        {
            field: "actions",
            headerName: "Actions",
            type: 'actions',
            width: 150,
            getActions: (params) => [
                <GridActionsCellItem
                    icon={<SaveIcon />}
                    label="Save"
                    onClick={() => handleSave(params.row)}
                />,
                <GridActionsCellItem
                    icon={<DeleteIcon />}
                    label="Delete"
                    onClick={() => handleDelete(params.row)}
                />
            ],
        },
    ];

    const handleSave = async (row: IPresidentMedal) => {
        try {
            setErrormsg("");
            const recordid = row.presidentMedalId;
            const updatedMedal = await postPresidentMedal(row);
            if (updatedMedal.errorMessage) {
                throw new Error(updatedMedal.errorMessage);
            }
            const updatedData = rowData.map(medal =>
                medal.presidentMedalId === recordid ? updatedMedal : medal
            );
            setRowData(updatedData);
            onChanged(updatedMedal, false);
        } catch (error: any) {
            setErrormsg(error.message);
        }
    };

    const handleDelete = async (row: IPresidentMedal) => {
        try {
            setErrormsg("");
            const r = await deletePresidentMedal(row);
            if ((r as any).errorMessage) {
                throw new Error((r as any).errorMessage);
            }
            const updatedData = rowData.filter(medal => medal.presidentMedalId !== row.presidentMedalId);
            setRowData(updatedData);
            onChanged(row, true);
        } catch (error: any) {
            setErrormsg(error.message);
        }
    };

    const processRowUpdate = (updatedrow: IPresidentMedal) => {
        const updatedRows = rowData.map(row =>
            row.presidentMedalId === updatedrow.presidentMedalId ? updatedrow : row
        );
        setRowData(updatedRows);
        return updatedrow;
    };

    const handleAddNew = () => {
        const nextId = -(rowData.length + 1);
        const newMedal = {
            ...blankPresidentMedal,
            presidentMedalId: nextId, // Use a negative number as a temporary ID
            presidentId: president.presidentId,
        };
        setRowData([...rowData, newMedal]);
    };

    return (
        <div style={{ height: '100%', width: '100%' }}>
            <h2>{errormsg}</h2>
            <button
                className="btn btn-primary"
                onClick={handleAddNew}
            >
                Add New
            </button>
            <DataGrid
                rows={rowData}
                columns={columns}
                processRowUpdate={processRowUpdate}
                getRowId={(row) => row.presidentMedalId}
            />
        </div>
    );
}
